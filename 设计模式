1、什么是设计模式？你用过或者了解哪些设计模式？

工厂模式
代理模式
观察者模式
2、什么是单例模式？单例模式实现的方式有哪些？【不下7种】 饿汉模式和懒汉模式实现方式有什么区别？
在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中，应用该模式的一个类只有一个实例。
单例类只能有一个实例；
单例类必须自己创建自己的唯一实例；
单例类必须给所有其他对象提供这一实例。

四种：懒汉式单例、饿汉式单例、登记式单例、枚举式单例
懒汉式单例


懒汉式单例
不着急实例化，需要用的时候才初始化
原始式
public class Singleton {
    private Singleton() {}
    private static Singleton singleton = null;
    public static Singleton getInstance() {
         if (singleton== null) {  
             singleton= new Singleton();
         }  
        return singleton;
    }
}
缺点：
在反射面前没什么用，因为java反射机制是能够实例化构造方法为private的类的；
线程不安全，因为线程访问具有随机性，并发环境可能出现多个singleton实例
线程同步式
public class Singleton {
    private Singleton() {}
    private static Singleton singleton = null;

    //为了保证多线程环境下正确访问，给方法加上同步锁synchronized
    public static synchronized Singleton getInstance() {
        if (singleton == null) {
            singleton = new Singleton();
        }
        return singleton;
    }
}
缺点：在方法调用上加了同步，虽然线程安全了，但是每次都有同步，会影响性能，毕竟99%是不需要同步的
双重锁检查式
public class Singleton {
    private Singleton() {}
    private static Singleton singleton = null;

    //双重锁检查
    public static Singleton getInstance() {
        if (singleton == null) {
            synchronized (Singleton.class) {
                if (singleton == null) {
                    singleton = new Singleton3();
                }
            }
        }
        return singleton;
    }
}
优点：线程安全，且确保了只有第一次调用单例时才会做同步，避免了每次都同步的性能损耗；
缺点：双重锁降低了程序响应速度和性能
静态内部类式
public class Singleton {
    private Singleton() {}

    //内部类的初始化需要依赖主类，需要先等主类实例化之后，内部类才能开始实例化
    private static class LazyHolder {
        //这里加final是为了防止内部将这个属性覆盖掉
        private static final Singleton INSTANCE = new Singleton();
    }

    //这里加final是为了防止子类重写父类
    public static final Singleton getInstance() {
        return LazyHolder.INSTANCE;
    }
}
优点：利用了classloader机制来保证初始化instance时只有一个线程，线程安全且没有性能损耗
饿汉式
类初始化的时候就立刻实例化，天生线程安全
public class Singleton {
    private Singleton() {}
    private static final Singleton singleton = new Singleton();
    public static Singleton getInstance() {
        return singleton;
    }
}
缺点：系统启动时，占用资源；如果后期这个单例没有被使用，会造成资源浪费
注册登记式
相当于有一个容器装载所有实例，在实例产生之前先检查下容器有没有，如果有就直接取出来，如果没有就先new一个放进去，然后给后面的人用，SpringIoc容器就是一种注册登记式单例
登记式单例实际上维护了一种单例类的实例，将这些实例存放在一个Map中，对于已经登记过的实例，则从Map直接返回，没有登记的，则先登记，然后返回；
登记式单例内部实现其实还是用的饿汉式，因为其中的static方法块，它的的单例在类被装载时就被实例化了
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * 注册登记式单例
 * 类似Spring里面的方法，将类名注册，下次从里面直接获取
 */
public class Singleton {
    //Spring最底层的这个容器就是一个map，说白了，IOC容器就是一个map
    private static Map<String, Singleton> map = new ConcurrentHashMap<String, Singleton>();

    //每个class对应一个map的key，也就是唯一的id
    static {
        Singleton singleton = new Singleton();
        map.put(singleton.getClass().getName(), singleton);
    }

    //保护默认构造函数
    protected Singleton() {}

    //静态工厂方法，返回此类唯一的实例
    public static Singleton getInstance(String name) {
        if (name == null) {
            name = Singleton.class.getName();
        }
        if (map.get(name) == null) {
            try {
                map.put(name, (Singleton) Class.forName(name).newInstance());
            } catch (InstantiationException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
        }
        return map.get(name);
    }
}
枚举式单例
这种方式不仅能解决多线程同步问题，而且能防止反序列化重新创建新的对象，不过由于jdk1.5中才加入enum特性，所以不常用
public enum Singleton {
    INSTANCE;

    public void getInstance() {
    }
}

3、单例模式如何保证线程安全？
在同步代码块中instance实例化之前进行判断，如果instance为null，才对其进行实例化。这样，就能保证instance只会实例化一次了。也就是所谓的双重检查加锁机制。
Java语言是支持多线程的，为了解决线程并发的问题，在语言内部引入了 同步块(synchronized) 和 volatile 关键字机制。 

4、你用过volatile关键字，它的是如何实现的？【涉及一些底层硬件的实现机制】
是一个类型修饰符。volatile 的作用是作为指令关键字，确保本条指令不会因编译器的优化而省略。
证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。（实现可见性）
禁止进行指令重排序。（实现有序性）
volatile 只能保证对单次读/写的原子性。i++ 这种操作不能保证原子性。

5、工厂模式？如何实现？
工厂模式就是将对象的创建交由工厂来实现，程序只管使用其中具体的方法即可
我们为什么要使用工厂模式？
1.将对象的创建和对象的使用分开，降低耦合度，提供代码重复利用率；
2.后期对于创建对象的修改成本小。
那么什么场景下，适合使用工厂模式呢？

1. 对象的创建过程/实例化准备工作很复杂，需要初始化很多参数、查询数据库等。其中的参数设置错误，就比较影响客户的使用。
例如：
一个数据库工厂：可以返回一个数据库实例，可以是mysql，oracle等。

这个工厂就可以把数据库连接需要的用户名，地址，密码等封装好，直接返回对应的数据库对象就好。不需要调用者自己初始化，减少了写错密码等等这些错误。调用者只负责使用，不需要管怎么去创建、初始化对象。

2.类本身有好多子类，这些类的创建过程在业务中容易发生改变，或者对类的调用容易发生改变。

工厂模式从简单到复杂可以分为三大类，分别是简单工厂模式、工厂方法模式、抽象工厂模式。大家可以根据自己的应用场景来选择，下面进行逐一介绍。

简单工厂模式
有一个工厂类，负责产出产品。通过工厂类的一个方法返回产品（返回的类型是抽象产品类）。不过产品多种多样，具体的产品类要继承自这个抽象产品类。
工厂方法模式
简单工厂模式只是让一类对象的创建让工厂管理了起来。但是对于软件设计中的开闭原则（即对扩展开放，对修改封闭）遵循的并不好。
抽象工厂模式

我们有时候需要的不仅仅是一类产品，可能是一套产品，比如，生产一支笔，不仅要生产笔芯，还有生产笔杆。

笔芯可以是A1厂的，也可以是A2厂的。笔杆可以是B1厂的，也可以是B2厂的。

那么我们的抽象工厂类，就不能只有一个create方法，应该有两个，一个制造A类产品，一类制造B类产品。



6、什么是代理模式？代理模式有哪几种实现方式？ 动态代理的实现方式（jdk、cglib），这两种实现方式各有什么不同？
为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。
代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。 
中介隔离作用：在某些情况下，一个客户类不想或者不能直接引用一个委托对象，而代理类对象可以在客户类和委托对象之间起到中介的作用，其特征是代理类和委托类实现相同的接口。
开闭原则，增加功能：代理类除了是客户类和委托类的中介之外，我们还可以通过给代理类增加额外的功能来扩展委托类的功能，这样做我们只需要修改代理类而不需要再修改委托类，符合代码设计的开闭原则。

1.静态代理      
 第一步：创建服务类接口
 第二步：实现服务接口
第三步：创建代理类
第四步：编写测试类
2.动态代理
　　在动态代理中我们不再需要再手动的创建代理类，我们只需要编写一个动态处理器就可以了。真正的代理对象由JDK再运行时为我们动态的来创建。
第一步：编写动态处理器
第二步：编写测试类

3 、抽象代理

7、什么spring框架？用过spring框架么？
1. spring是开源的轻量级框架

2 spring核心主要两部分：
（1）aop：面向切面编程，扩展功能不是修改源代码实现
（2）ioc：控制反转，

spring主要就是不用你自己创建对象，都配置在配置文件中。


8、什么是IOC和DI？说说你对IOC和DI的理解？
控制反转  依赖注入 
是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。
一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象
，从而导致类与类之间高耦合，难于测试；有了IOC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，
所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。

@20190906
9、什么是AOP？AOP的各个构成部分的概念？
是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。
一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象
，从而导致类与类之间高耦合，难于测试；有了IOC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，
所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。

10、AOP的实现方式？【拦截器思想、动态代理】
路径切入
1、新建切面类上面加俩注解  @Aspect @Component 缺一不可
2、@Pointcut写上要切入的包，也可以精确到类
3、@Before切入点之前要处理的业务
4、@After切入点之后要处理的业务

注解切入
1、自定义注解
2、切入类@Aspect @Component 缺一不可
3、@Pointcut写上要切入注解（
意思是带此注解者，必切！）
4、@Before、@After同上。

11、Spring容器初始化的流程？。
器主要有三种初始化方式，xml；注解；JavaConfig+注解形式

一、首先调用父类GenericApplicationContext的无参构造方法，实例化
二、调用自身的无参构造方法
三、register(annotatedClasses) 注册初始传入的配置类为bd。
四、refresh() spring容器初始化最核心的部分，这里处理了其90%的初始化工作。
12、Spring bean的加载过程？以及生命周期？

通过实现 InitializingBean/DisposableBean 接口来定制初始化之后/销毁之前的操作方法；
	通过 <bean> 元素的 init-method/destroy-method属性指定初始化之后 /销毁之前调用的操作方法；
	在指定方法上加上@PostConstruct 或@PreDestroy注解来制定该方法是在初始化之后还是销毁之前调用。 
Constructor > @PostConstruct > InitializingBean > init-method
