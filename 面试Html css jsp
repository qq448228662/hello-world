前端课程
======
1、什么时块域标签？什么时行内标签 ？有什么区别和特性？<br/>


2、块标签和行内标签的哪些css样式属性可以使用？有哪些区别？


3、什么是单标签，什么是双标签？双标签之间不允许交叉

4、html标签分为head标签和body标签，分别说明都包含哪些常用的标签

5、css或html中颜色的取值方式

6、资源引用时相对路径和绝对路径的异同点？

7、css或者html中常用的长度单位 ？哪些是相对长度单位？哪些是绝对

8、css根据所在位置的分类，以及各类css的分类

9、什么叫就近原则，范围最小，    一般写顺序的原则  先外部样式 后内部样式，最后内联样式 

10、css中选择器的有哪些  ？重要


11、选择器的优先级如何确定 ？包含组合选择器 和基础选择器

12、import 关键字的作用 ？ 【能不用就不用 】 

13、盒子模型？水平和垂直的盒子模型？作用是什么？

14、盒子模型的浏览器兼容性？对于width和heith的计算方式？

15、块域元素和行内元素的css样式属性的继承性是怎样的？

16、什么是浮动？什么是绝对定位和相对定位？什么是文档流，绝对定位和相对定位在文档流中的差异性？

@20190930
17、 javascript和java的关系？以及版本更迭？javascript，es6，typescript？ecmascript
除了语法上有点像Java，其他部分基本上没啥关系。  ECMAScript是一种语言标准，而JavaScript是网景公司对ECMAScript标准的一种实现 
这es6 是ECMAScript 的第六版修订，于 2015 年完成标准化。 
ypeScript 是 Microsoft 开发和维护的一种面向对象的编程语言。它是 JavaScript 的超集，包含了 JavaScript 的所有元素，可以载入 JavaScript 代码运行，并扩展了 JavaScript 的语法。

18、 javascrip的数据类型，常用的类型有哪些？变量的作用域范围如何划分？
   局部作用域 作用在一个函数中，java的局部变量作用在{}里面
undefined、null、boolean、number、string 
，基本数据类型是按值访问的，因此可以操作保存在变量中的实际的值。 从一个变量向另一个变量复制基本类型的值，会在变量对象上创建一个新值，然后把该值复制到为新变量分配的位置上 
当代码在一个环境中执行时，会创建变量对象的一个作用域链，作用域链的用途是保证对执行环境有权访问的所有变量和函数的有序访问。

19、 javascrip中常用的数据类型有哪些？什么情况下被使用到？ 

null  undefine  number string object boolean 数组 

20、undefined和null的区别？各在什么情况下使用？
1.null是javascript的关键字，表示一个特殊值，常用来描述“空值“。typeof数据类型为object，因此，可认为null是一个特殊的对象。但实际上，通常认为null是它自有类型的唯一一个成员。
2.undefined不是关键字，表示值的空缺，它是变量的一种取值，表明变量没有初始化。typeof数据类型为undefined。ECMAScript3中将undefined认为可读写的变量，此错误在ECMAScript5中修正，改为只读。
3.null和undefined尽管有不同，但是都表示“值的空缺”。用“==”认为两者相等，需要用严格相等运算符“===”来区分它们。在希望值为布尔型它们的值都是假，即false。null和undefined都属于不拥有方法类型。
4.使用情况区分：undefined是表示系统级的、出乎意料的类似错误的值的空缺。null是表示程序级别、正常的在意料之中的值的空缺。当需要作为参数传入函数时，用null更为合适。


21、函数的声明方式有哪几种？
function func1([参数]){
/*函数体*/
}
var func2=function([参数]){
/*函数体*/
};
var func3=function func4([参数]){
/*函数体*/
};


上述第一种方式是最常用的方式，不用多说。
第二种是将一匿名函数赋给一个变量，调用方法：func2([函数]);
第三种是将func4赋给变量func3，调用方法：func3([函数]);或func4([函数]);
 

22、函数调用之间的返回值？  默认是undefined  函数的传参形式？ 
函数的形参					js的函数在调用时，形参可以不赋值，或者部分赋值，正常执行的。		
形参的默认值是undefined				函数的返回值			
js中函数默认返回undefined，也可以使用return语句自定义返回值。	
函数作为实参传递:					在js中函数可以作为实参传递

23、javascript由异常处理么？常用的异常处理有哪些？
try{
    //your code 
}catch(e){
    //while raise a error ,will exc this code
}
catch(e){
    //while raise a error,and pre catch has beed run  ,will exc this code
}
catch(e){
    //while raise a error,and pre catch has beed run  ,will exc this code
}final{
    //whether raise a error, this code will be run 
}

24、javascript是面向对象的吗？如何创建一个类？
js是基于对象 和事件驱动的简单描述型语言 ，他从服务器端 被下载到客户端，由浏览器运行，
支持面向对象的    
var obj = new Object(); 
方式2 : var obj = {};

25.
1、原型链继承
核心： 将父类的实例作为子类的原型
特点：
非常纯粹的继承关系，实例是子类的实例，也是父类的实例
父类新增原型方法/原型属性，子类都能访问到
简单，易于实现
缺点：
要想为子类新增属性和方法，必须要在new Animal()这样的语句之后执行，不能放到构造器中
无法实现多继承
来自原型对象的所有属性被所有实例共享（来自原型对象的引用属性是所有实例共享的）（详细请看附录代码： 示例1）
创建子类实例时，无法向父类构造函数传参
2、构造继承
核心：使用父类的构造函数来增强子类实例，等于是复制父类的实例属性给子类（没用到原型）
特点：
解决了1中，子类实例共享父类引用属性的问题
创建子类实例时，可以向父类传递参数
可以实现多继承（call多个父类对象）
缺点：
实例并不是父类的实例，只是子类的实例
只能继承父类的实例属性和方法，不能继承原型属性/方法
无法实现函数复用，每个子类都有父类实例函数的副本，影响性能
3、实例继承
核心：为父类实例添加新特性，作为子类实例返回
特点：
不限制调用方式，不管是new 子类()还是子类(),返回的对象具有相同的效果
缺点：
实例是父类的实例，不是子类的实例
不支持多继承
4、拷贝继承
特点：
支持多继承
缺点：
效率较低，内存占用高（因为要拷贝父类的属性）
无法获取父类不可枚举的方法（不可枚举方法，不能使用for in 访问到
5、组合继承
核心：通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用
特点：
弥补了方式2的缺陷，可以继承实例属性/方法，也可以继承原型属性/方法
既是子类的实例，也是父类的实例
不存在引用属性共享问题
可传参
函数可复用
缺点：
调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了）
6、寄生组合继承
核心：通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法/属性，避免的组合继承的缺点
特点：
堪称完美
缺点：
实现较为复杂


26.

原型Prototype
每个对象都有他的_proto_属性，并且指向他的prototype原型对象
每个构造函数都有一个prototype原型对象
每个prototype原型对象里面的constructor属性都指向构造函数本身
实例对象的_prototype_指向构造函数的prototype属性，从而可以实现继承，而此时prototype原型对象相当于特定
类型的所有实例对象可以访问的容器
原型链？
每个对象都有一个__proto__属性，指向它的prototype原型对象，而该prototype原型对象又有它自己的prototype原型对象，依次层层往上查询直到prototype的原型对象为null，则该条查询路径为原型链。

27.闭包就是能够读取其他函数内部变量的函数。例如在javascript中，只有函数内部的子函数才能读取局部变量，所以闭包可以理解成“定义在一个函数内部的函数“。在本质上，闭包是将函数内部和函数外部连接起来的桥梁。
与闭包相关概念：         
   js中的函数可以嵌套定义；     
   js中没有块级元素，局部变量是以函数体来划分作用域范围的；        
js中的局部变量可以在函数运行结束之后继续滞留内存中；   
 js中可以使用一个函数作为返回值类型；也就是 使用 return可以返回一个匿名函数对象；     
  js中可以使用一个函数作为实参传递给形参；也就是可以使用函数对象作为另一个函数调用时给的实参；       
  闭包的好处：            不增加额外的全局变量；            执行过程中所有变量都在匿名函数内部；


28 什么是DOM？文档对象 模型 什么是BOM？ 浏览器模型  他们之间有什么关系？进行DOM操作的方法 

29 直接创建 对象的方法有哪些？  重要 
有点 ：简单易用 。
缺点 ：创建许多相同的对象时，每次都要重复编写代码。 无法确定创建的对象的具体类型 

var 对象 =new Object();
对象.属性名=属性值;
对象.函数名=function([参数列表]){
//语句组 
}
//调用 
对象名.函数名();
对象初始化器 方式 
   优点 :结构简明易读.
   缺点 :创建许多相同的对象时,每次都要重复编写代码.无法确定创建的对象的具体类型.
   var objectName={
   property1: value1 ;
   property2: value2;
   ...
   method1:function([paramaeter_list]){
   //语句组 
   }
   methodN:function([parameter_list]){
   //语句组 
   }
   构造函数方式 :
   优点 :封装属性初始化 .
   缺点 :构造函数内声明的方法在每次创建新对象时都会重新创建(在javaScript中,函数也是对象).也就是说,构造函数内的方法是与对象绑定的,而不是与类绑定的.
   function 构造函数([参数列表 ]){
   this.属性=属性值;
   this.属性=属性值N;
   this.函数=myFunc ;
   }
   function myFunc([参数列表]){
   }
   
   
   
   
   
 
30 js中的事件链以及冒泡机制，以及如何组织冒泡的发生？
