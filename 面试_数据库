数据库 ：oracle 大项目 
mysql 轻量级的数据库 
## 当前数据库的分类 ？什么是关系型数据库？什么是非关系型数据库？


## select语句查询 ：根据业务需求写查询语句 
 select 结果集显示的字段列表  from  所查询表的列表 where 查询条件语句;
在结果集后面使用as（mysql） 可以给查到的字段起一个别名   oracle不使用as  直接空格 别名 

##Oracle 数据库中单引号 与双引号的区别 ？
均表示字符串， 双引号 表示 内部字符串严格区分大小写，用作特殊字符或关键字，被当作列处理 ，将非法格式符包装起来
单引号 表示字符串常量 字符串中双引号为字符串处理，用单引号标识 ，表识一个单引号

##查询语句中对于null的处理？ 运算表达式中null值的处理  mysql 和oracle
会额外加一段 and 或 or 判断该数据是否为null  （is null ）
##distint 关键字的用法 
用在结果集显示的字段前，去重功能 ；
用在 函数方法中 （distinct 字段） 去重功能 

##查询结果集如何排序 ？asc/desc 多字段排序 
select 结果集显示的字段列表  from  所查询表的列表 where 查询条件语句
                  order by 排序字段1 asc/desc , 排序字段2 asc/desc, 排序字段3 asc/desc ;
  对查询结果集可以使用order by 进行排序；asc正序 dasc倒序 

##mysql中如何将两个字段内容连接到一起
mysql中 字段拼接的方式？ mysql使用concat函数进行拼接；oracle使用||进行拼接 

##数据库常用函数 字符串函数 数值函数  日期函数 ；分别列举三者之间的转换函数？

to_char 将日期、数值转换为指定格式的字符串；
to_number 将字符串转换为数值类型；
to_date 将指定格式的字符串转换为日期类型；

##oracle通用函数 nvl（重点）  nvl2，case-when、decode
 nvl(expr,value) 如果expr表达式为null，则使用value值；（把null值专为指定的value值）
 在oralce中含有null值的表达式的结果都是null值，也就是说其他的数值与null进行运算结果都是null值；
 可以使用nvl进行转换处理；   
 nvl2(expr,value1,value2) if expr != null,return value1,else return value2;

 条件表达式函数：
      case函数：
          语法：
               类似于java的switch-case用法：（做等值匹配）
               case 字段或者表达式  when 匹配值  then 返回值
                                    when 匹配值  then  返回值
                                    else 返回值
                                    end
                                         
               类似于java的if-else写法：
               case when 判定表达式  then 返回值
                    when 判定表达式  then 返回值
                    else 返回值
                    end   
          
      decode函数：
          语法：是case函数的switch-case方式的简写形式；
               decode(字段或者表达式,匹配值1,返回值1,匹配值2,返回值2,匹配值n,返回值n,else返回值)





##多表查询，什么是外连接？有几种外连接 【提示】三种外连接 左外连接（左侧作为主表进行拼配，右侧没有匹配记录时就提供一个空行） 右外连接 全外连接（全外连接是将右外连接和左外连接的结果进行合并，并剔除重复的记录） （不常用笛卡尔连接 也是外连接 
在进行查询操作时，需要使用两个或者多个表之间的数据进行组合查询；  根据多表之间关联条件的关联方式：

##什么 是等值连接 ？常用的等值连接 有哪几种 ？ 【提示】where 等值连接 jion-on 等值连接 ，自然等值连接  using等值连接  
多表查询连接条件采用等值方式。where条件中用两个表的连接字段进行等值条件过滤；连接字段间用and 即可 
使用join on等值连接 
使用using子句的等值连接
          因为自然连接会默认使用所有的同名的字段作为连接条件，不够灵活；
自连接
          一个表自己同自己的等值连接叫做自连接；
          一般自连接发生在同一个表中的不同字段之间等值关联连接；



##什么是不等值连接，不等值连接的作用 举例说明
不等值连接是指连接条件不是等值运算，一般使用between and 作为连接运算条件；

##什么是分组查询？ 组函数【提示】 count sum avg  max min （分组查询函数自动过滤null值），如果需要null，使用nvl进行预处理
 组函数是多行函数，是处理多条数据记录，获取一个函数计算结果；
sum ：求和
 avg ：平均
max ：最大值
min ：最小值
count ：统计个数


##如何进行分组查询？ group by如何使用？什么是having语句，如何使用？
 分组查询就是使用分组字段将数据分成若干组，然后每一组再单独进行处理输出一个结果作为查询结果集中的一部分
 
  select 显示字段列表 from 被查询列表 where 查询过滤条件 group by 分组字段列表 having 分组过滤条件  order by 排序字段列表

解析：
         group by 后面的字段是分组字段，做为分组标准
         having 后面的过滤条件是对 group by 分组之后的各组数据的过滤处理；
         having中的过滤条件中只能包含分组函数或者是分组字段列表中的字段；
         
         显示字段类表在含有分组函数或者分组查询时，要求所显示的字段必须是分组函数结果、在分组字段列表中出现的字段
         不能是其他的字段； 也就是显示字段来自于分组函数或者group by之后的分组字段列表；
         
      补充：
         含有分组查询的语句的解析过程：
             （1） 先执行where条件过滤，获取要查询的集合；
             （2） 使用group by对where过滤之后的集合按照分组字段列表进行分组，获取若干组数据；   
             （3） 使用 having 对group by 分组之后的若干组数据进行过滤处理；
             （4） 如果现实字段列表中有分组函数，对 having过滤之后的若干组数据分进行组函数处理；
             （5） 对（4）结果集合进行order by 排序显示；
             
      原则：
          如果有多个过滤条件，这些过滤条件优先在where中进行处理，可以提高查询效率； 
          能写在where中的过滤条件就不要写在having中；      

 
    
#分组查询需要注意的： 分组查询中select部分显示的字段，要么是分组函数要么是出现在group by之后的字段

##什么是子查询 exists关键字如何使用 ？

在查询语句中有使用了查询语句，就是子查询； 
查询可以出现在 显示字段部分、from之后的被查询列表中、where条件中等；
如果在查询出现在where条件部分，根据子查询结果集中的记录数可以分为多行子查询和单行子查询；
  多行子查询经常和操作符 in any all not 等配合；
  单行子查询经常和操作符 = > < >= <= <> 等配合；
  子查询要包含在括号内。
  将子查询放在比较条件的右侧。
  
 使用EXISTS关键字可以进行存在判定查询，EXISTS类似于java的if判定；
      EXISTS判定：
          EXISTS后面跟随一个判定子查询，根据子查询的查询结果只做判定处理（子查询作为if判定条件）
          判定标准：如果子查询结果不为空（查到了结果）则返回true；
          然后主查询根据EXISTS子查询判定的结果，来决定当前这条数据记录是不是要包含在结果集中；
          如果EXISTS子查询存在结果则返回true，与之对应的这条记录也放入查询结果中；
      
      NOT EXISTS：
          NOT EXISTS和EXISTS判定逻辑相反；
          判定标准：如果子查询没有查询结果（没有查到）则返回true；
          
      语法：
          select 显示字段列表 from 查询表列表 where exists(存在条件判定子查询语句)
          
      解析：
          if(存在条件判定子查询语句为true){
             当前的这条记录放入主查询select的结果集中
          }else{
             过滤舍弃当前这条记录
          }



##什么是多行子查询？ 和单行子查询【单行使用exists ，多行使用 in any all ><=】 
如果在查询出现在where条件部分，根据子查询结果集中的记录数可以分为多行子查询 和单行子查询


##常见的集合操作


##oracle和mysql分页查询如何实现？重点 {oracle可以使用rowid伪对象，+子查询；mysql}   limit关键字

##delete与 truncate删除表中数据的 区别 



##DML是受事务管理的  Data Manipulation Language
##什么是事务？ 事务的特点？ 

  事务是应用程序中一系列严密的操作，所有操作必须成功完成，否则在每个操作中所作的所有更改都会被撤消。也就是事务具有原子性，一个事务中的一系列的操作要么全部成功，要么一个都不做。
（1）原子性：整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。
      （2）一致性：在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。
      （3）隔离性：隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行 相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，  必须串行化或序列化请 求，使得在同一时间仅有一个请求用于同一数据。
      （4）持久性：在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。
 ##事务的隔离级别 
 读未提交   脏读 读提交就可以解决
 读已提交     一个事物要等 另一个事物读完后 才能读   不可重复读  重复读就可以
 重复读      重复读 会出现幻读  幻读对应的是 插入操作 
 顺序读        事务串行化顺序执行，可以避免脏读、不可重复读与幻读
 ##常用的约束字段 ： 非空约束 唯一约束 主键约束 外键约束  自定义check约束 
 
 ##了解权限与角色，如何创建oracle 用户
 ##如何赋予权限，剥夺权限 ，权限的传递
 ##oracle对象的使用？
 
 ##什么是视图?如何创建视图 ?视图与物理表之间有什么差异性？
 
##什么是序列？索引的作用 ？  oracle 序列 是一个单独的对象，是一个计数器 ，只能向上增 ，一般用于创建主键
 序列是按照设定的步长从初始值自增的一个计数器；
  注意：
      计数器每次都获取下一个值；
      计数器只能向前取值；
      计数器有两个伪对象：
           nextval：下一个值；
           currval：当前的值；
           
      计数器第一次使用时应先调用nextval获取下一个值，然后再使用currval获取当前值；     
      
      一般一个序列是为一个表中的一个字段提供自增数值服务；
      不建议多个字段或者是多个表公用一个序列（除业务需求之外）
      
##什么是索引？索引的作用？索引在什么情况下可以使用？什么情况下不建议使用 为了方便查找数据设置的 对象 ，

##什么是存储过程？什么是函数？有什么异同点？  参数的类型有哪些 ？【提示 out in int 】
存储过程是pl编程中一段可以独立执行的程序代码，可以传递参数；
  函数    是pl编程中的可以独立执行的一段程序代码，可以传递参数；
  
  存储过程和函数区别：
      存储过程没有返回值；
      函数可以有返回值；
      
   传递的参数有三种类型：
      in类型：默认的；
           只能从外往里传值；
      out类型：
           只能从里往外传值；
      in out类型：   
           可以从里往外传值也可以从外往里传值；

##什么是触发器？什么是游标？如何使用
触发器就是按照条件在一定的时机下自动执行的某种动作处理；

##Oracle和MySql数据库 如何使用主键字段自增？【oracle：序列 +触发器 （还有其他方式 ）】，Mysal是自增属性

##Oracle数据库 可以做哪些 优化 ？ 【Oracle和Mysql分别说明 ，提前准备整理】

##什么是范式 ？经常用的哪些范式 第一 消除 组和组件  第二 消除部分依赖 第三 消除传递传递依赖第四  ？

##什么是数据库死锁 ？ 加锁粒度？

 
 
 
 
